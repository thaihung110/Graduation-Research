version: "3"

volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}
  kafka_data: {}
  metabase_data: {}

services:
  airflow:
    image: airflow:latest
    volumes:
      - ./airflow:/opt/airflow
      - ./airflow/plugins:/opt/airflow/plugins
      - ./spark-data:/opt/spark/data # Nếu cần thiết cho dữ liệu Spark
      - ./airflow/warehouse:/opt/airflow/warehouse
    environment:
      - PYTHONPATH=/opt/airflow/plugins:${SPARK_HOME}/python:${SPARK_HOME}/python/lib/py4j-0.10.9.5-src.zip
      - SPARK_HOME=/opt/spark
      - JAVA_HOME=/usr/lib/jvm/default-java
      - SPARK_MASTER_HOST=local[*]
      - SPARK_DRIVER_MEMORY=1g
      - SPARK_EXECUTOR_MEMORY=1g
    ports:
      - "8080:8080" # Airflow Web UI
    command:
      - bash
      - -c
      - |
        airflow db init &&
        sleep 10 &&
        airflow webserver &
        airflow scheduler

  postgres:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - metadata_data:/var/lib/postgresql/data
      - ./airflow/warehouse:/opt/airflow/warehouse
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid

  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.5.10
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1

  coordinator:
    image: apache/druid:31.0.0
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
      - ./airflow/warehouse:/opt/airflow/warehouse
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - ./druid/environment

  broker:
    image: apache/druid:31.0.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
      - ./airflow/warehouse:/opt/airflow/warehouse
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - ./druid/environment

  historical:
    image: apache/druid:31.0.0
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
      - ./airflow/warehouse:/opt/airflow/warehouse
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - ./druid/environment

  middlemanager-1:
    image: apache/druid:31.0.0
    container_name: middlemanager-1
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
      - ./airflow/warehouse:/opt/airflow/warehouse
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      # - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - ./druid/environment
    deploy:
      resources:
        limits:
          memory: 6g
          cpus: "2.0"
        reservations:
          memory: 6g
          cpus: "1.5"
  
  middlemanager-2:
    image: apache/druid:31.0.0
    container_name: middlemanager-2
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
      - ./airflow/warehouse:/opt/airflow/warehouse
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8092:8091"
      # - "8106-8110:8100-8105"
    command:
      - middleManager
    env_file:
      - ./druid/environment
    deploy:
      resources:
        limits:
          memory: 6g
          cpus: "2.0"
        reservations:
          memory: 6g
          cpus: "1.5"

  router:
    image: apache/druid:31.0.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
      - ./airflow/warehouse:/opt/airflow/warehouse
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - ./druid/environment
  
  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    volumes:
      - kafka_data:/bitnami
    ports:
      - 9092:9092
    environment:
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      # KRaft settings
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=3
      # Listeners
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - '9080:8080'
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - LOGGING_LEVEL_ROOT=DEBUG
      - KAFKA_CLUSTERS_0_NAME=Kafka_Cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
    depends_on:
      - kafka
